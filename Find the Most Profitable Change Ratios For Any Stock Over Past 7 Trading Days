import time
import yfinance as yf
import numpy as np
import datetime as dt

def slopeMaker():
    if stock.peak1 != 0 and stock.peak2 != 0:
        rise1 = stock.peak2 - stock.peak1
        run1 = stock.peakTime2 - stock.peakTime1
        stock.resistanceSlope = rise1 / run1

    if stock.valley1 != 0 and stock.valley2 != 0:
        rise2 = stock.valley2 - stock.valley1
        run2 = stock.valleyTime2 - stock.valleyTime1
        stock.supportSlope = rise2 / run2

class Stock:
    def __init__(self, ticker, opening_price=0.0, current_price=0.0, previous_price=0.0, time=0.0, can_set_peak=True,
                 can_set_valley=True, shares_bought=0.0, bought_price=0.0):
        self.ticker = ticker
        self.opening_price = opening_price
        self.current_price = current_price
        self.previous_price = previous_price
        self.time = time
        self.can_set_peak = can_set_peak
        self.can_set_valley = can_set_valley
        self.shares_bought = shares_bought
        self.bought_price = bought_price
        self.sold_price = 0.0
        self.peak1 = 0.0
        self.peak2 = 0.0
        self.peak3 = 0.0
        self.peakTime1 = 0.0
        self.peakTime2 = 0.0
        self.peakTime3 = 0.0
        self.valley1 = 0.0
        self.valley2 = 0.0
        self.valley3 = 0.0
        self.valleyTime1 = 0.0
        self.valleyTime2 = 0.0
        self.valleyTime3 = 0.0
        self.resistanceSlope = 0.0
        self.supportSlope = 0.0
        self.change_sl = 0.0
        self.change = 0.0
        self.ATR = 0.0
        self.stoploss = 0.0
        self.state = 0
        self.p123 = 0
        self.v123 = 0

stock = Stock("NIO")

# Get the ATR
# Get historical price data
price_data = yf.download(stock.ticker,
                      start= dt.date.today()-dt.timedelta(days=20),
                      end= dt.date.today(),
                      progress=False)
#Initialize counter and True Range Array for while loop

counter = 1
TR_Array = []
while(counter < price_data.shape[0]):
    #Get current high, current low, and previous close
    day_high = price_data.iloc[counter, 1]
    day_low = price_data.iloc[counter, 2]
    prev_close = price_data.iloc[(counter-1),3]
    #Calculate the True Range possibilities
    ATR_A = day_high-day_low
    ATR_B = abs(day_high-prev_close)
    ATR_C = abs(day_low-prev_close)
    counter = counter + 1
    TR = max(ATR_A, ATR_B, ATR_C)
    TR_Array.append(TR)
#Calculate average true range
TR_Array = np.array(TR_Array)
stock.ATR = np.mean(TR_Array)

max_profit = 0

#Get minutely price data
data = yf.download(tickers=stock.ticker, period="7d", interval="1m")
prices = np.array(data.iloc[:,4])

#Get a vector with different proportions for the stoploss and change for setting peaks and valleys
vec = np.arange(1,10.5, 0.5).tolist()

for values_1 in vec:
    stock.change_sl = float((stock.ATR / values_1))
    for values_2 in vec:
        stock.change = float((stock.ATR / values_2))
        time_counter = 0
        profit = 0
        for minutely_closing_price in prices:

            stock.time = time_counter
            time_counter = time_counter + 1
            stock.current_price = minutely_closing_price

            # First state -> initialize the values to the first price seen
            if stock.state == 0:
                stock.valley1 = stock.current_price
                stock.valley2 = stock.current_price
                stock.valley3 = stock.current_price
                stock.peak1 = stock.current_price
                stock.peak2 = stock.current_price
                stock.peak3 = stock.current_price
                stock.state = 1

            # Second through seventh state -> set P1, P2, P3, V1, V2, V3
            if stock.can_set_peak and stock.current_price > stock.valley3 + stock.change:
                # print("PEAK 1 AND 2 AND 3 RESET!")
                stock.peakTime1 = stock.peakTime2
                stock.peakTime2 = stock.peakTime3
                stock.peakTime3 = stock.time
                stock.peak1 = stock.peak2
                stock.peak2 = stock.peak3
                stock.peak3 = stock.current_price
                stock.can_set_peak = False
                stock.can_set_valley = True
                stock.p123 = 1
                if stock.state < 7:
                    stock.state = stock.state + 1
            if stock.can_set_valley and stock.current_price > stock.peak3 and stock.p123 == 1:
                # print("PEAK 3 RESET!")
                stock.peak3 = stock.current_price
                stock.peakTime3 = stock.time
                stock.can_set_peak = False
                stock.can_set_valley = True
            if stock.current_price < stock.peak3 - stock.change and stock.can_set_valley:
                # print("VALLEY 1 AND 2 AND 3 RESET!")
                stock.valleyTime1 = stock.valleyTime2
                stock.valleyTime2 = stock.valleyTime3
                stock.valleyTime3 = stock.time
                stock.valley1 = stock.valley2
                stock.valley2 = stock.valley3
                stock.valley3 = stock.current_price
                stock.can_set_valley = False
                stock.can_set_peak = True
                stock.v123 = 1
                if stock.state < 7:
                    stock.state = stock.state + 1
                if stock.state == 7:
                    slopeMaker()
            if stock.can_set_peak and stock.current_price < stock.valley3 and stock.v123 == 1:
                # print("VALLEY 3 RESET!")
                stock.valley3 = stock.current_price
                stock.valleyTime3 = stock.time
                stock.can_set_valley = False
                stock.can_set_peak = True

            if stock.state == 7:
                support = stock.valley2 + stock.supportSlope * (stock.time - stock.valleyTime2)
                resistance = stock.peak2 + stock.resistanceSlope * (stock.time - stock.peakTime2)
                if (support < resistance):
                    if stock.current_price <= support and stock.shares_bought == 0:
                        stock.shares_bought = int(100000.0 * 0.01 / stock.current_price)
                        t = time.localtime()
                        current_time = time.strftime("%H:%M:%S", t)
                        # print("bought " + str(stock.shares_bought) + " shares of " + str(stock.ticker) + " at " + str(current_time))
                        stock.stoploss = stock.current_price - stock.change_sl
                        stock.bought_price = stock.current_price * stock.shares_bought
                    elif stock.current_price >= resistance and stock.shares_bought > 0:
                        t = time.localtime()
                        current_time = time.strftime("%H:%M:%S", t)
                        #print("sold " + str(stock.shares_bought) + " shares of " + str(stock.ticker) + " at " + str(current_time))
                        stock.sold_price = stock.current_price * stock.shares_bought
                        stock.shares_bought = 0
                        profit = stock.sold_price - stock.bought_price
                    elif stock.current_price <= stock.stoploss and stock.shares_bought > 0:
                        t = time.localtime()
                        current_time = time.strftime("%H:%M:%S", t)
                        #print("sold " + str(stock.shares_bought) + " shares of " + str(stock.ticker) + " on stop loss at " + str(current_time))
                        stock.shares_bought = 0
                        profit = stock.sold_price - stock.bought_price
                    if time_counter == len(prices) - 1 and stock.shares_bought > 0:
                        current_time = time.strftime("%H:%M:%S", t)
                        #print("sold " + str(stock.shares_bought) + " shares of " + str(stock.ticker) + " at " + str(current_time) + " because time ran out")
                        stock.sold_price = stock.current_price * stock.shares_bought
                        stock.shares_bought = 0
                        profit = stock.sold_price - stock.bought_price

        if profit > max_profit:
            max_profit = profit
            max_change_sl = stock.change_sl
            max_values_1 = values_1
            max_change = stock.change
            max_values_2 = values_2

print("The max profit was $" + str(max_profit))
print("The stoploss value was " + str(max_values_1) + " at " + str(max_change_sl))
print("The peak/valley change value was: " + str(max_values_2) + " at " + str(max_change))
